document.addEventListener("DOMContentLoaded", () => {
  // ========== LIMPIEZA DE SESI√ìN SOLO SI ES NECESARIO ==========
  // NO limpiar autom√°ticamente - solo si realmente no hay sesi√≥n v√°lida
  console.log("üîç Verificando estado de sesi√≥n...");

  // Solo limpiar si es la primera visita o datos corruptos
  const isLoggedIn = localStorage.getItem("isLoggedIn");
  const userEmail = localStorage.getItem("userEmail");

  if (isLoggedIn === "true" && userEmail) {
    console.log("‚úÖ Sesi√≥n v√°lida encontrada para:", userEmail);
  } else {
    console.log("üßπ Limpiando datos de sesi√≥n inv√°lidos...");
    localStorage.removeItem("isLoggedIn");
    localStorage.removeItem("userEmail");
    localStorage.removeItem("userName");
    localStorage.removeItem("token");
  }

  const loginBtn = document.getElementById("login-btn");
  const registerBtn = document.getElementById("register-btn");
  const userActions = document.querySelector(".user-actions");
  const cartBtn = document.querySelector(".cart-button");
  const profileBtn = document.getElementById("profile-btn");
  const mobileAccountBtn = document.getElementById("mobile-account-btn");

  console.log("üîç Elementos encontrados:", {
    loginBtn: !!loginBtn,
    registerBtn: !!registerBtn,
    userActions: !!userActions,
    cartBtn: !!cartBtn,
    profileBtn: !!profileBtn,
    mobileAccountBtn: !!mobileAccountBtn,
  });

  // Sistema de expiraci√≥n de sesi√≥n
  const SESSION_TIMEOUT = 5 * 60 * 1000; // 5 minutos en milliseconds
  let sessionTimer;

  function resetSessionTimer() {
    clearTimeout(sessionTimer);
    const isLoggedIn = localStorage.getItem("isLoggedIn") === "true";

    if (isLoggedIn) {
      sessionTimer = setTimeout(async () => {
        await showAlert(
          "Tu sesi√≥n ha expirado por inactividad. Por favor, inicia sesi√≥n nuevamente.",
          "warning",
          "‚è∞ Sesi√≥n Expirada"
        );
        logout();
      }, SESSION_TIMEOUT);
    }
  }

  function logout() {
    console.log("üö™ Cerrando sesi√≥n...");
    localStorage.removeItem("isLoggedIn");
    localStorage.removeItem("userEmail");
    localStorage.removeItem("userName");
    localStorage.removeItem("token");
    clearTimeout(sessionTimer);
    updateNavigation();
    console.log("‚úÖ Sesi√≥n cerrada exitosamente");
    window.location.href = "index.html"; // Cambi√© a index.html en lugar de sesion.html
  }

  // Reiniciar timer en actividad del usuario
  [
    "mousedown",
    "mousemove",
    "keypress",
    "scroll",
    "touchstart",
    "click",
  ].forEach((event) => {
    document.addEventListener(event, resetSessionTimer, true);
  });

  function updateNavigation() {
    const isLoggedIn = localStorage.getItem("isLoggedIn") === "true";
    const isMobile = window.innerWidth <= 768;

    console.log("üîÑ Actualizando navegaci√≥n:", { isLoggedIn, isMobile });

    // Actualizar estado del body para CSS
    if (isLoggedIn) {
      document.body.classList.add("logged-in");
      console.log("‚úÖ Clase 'logged-in' agregada al body");
    } else {
      document.body.classList.remove("logged-in");
      console.log("‚ùå Clase 'logged-in' removida del body");
    }

    // DESKTOP: Comportamiento original
    if (!isMobile) {
      console.log("üñ•Ô∏è Modo DESKTOP detectado");
      if (loginBtn) {
        loginBtn.style.display = isLoggedIn ? "none" : "block";
        console.log(`üî≤ Login btn: ${isLoggedIn ? "OCULTO" : "VISIBLE"}`);
      }
      if (registerBtn) {
        registerBtn.style.display = isLoggedIn ? "none" : "block";
        console.log(`üî≤ Register btn: ${isLoggedIn ? "OCULTO" : "VISIBLE"}`);
      }
      if (userActions) {
        userActions.style.display = isLoggedIn ? "flex" : "none";
        console.log(`üî≤ User actions: ${isLoggedIn ? "VISIBLE" : "OCULTO"}`);
      }
      // Asegurar que el bot√≥n m√≥vil est√© oculto en desktop
      if (mobileAccountBtn) {
        mobileAccountBtn.style.display = "none";
        console.log("üî≤ Bot√≥n m√≥vil FORZADO A OCULTO en desktop");
      }
    }
    // M√ìVIL: Nueva l√≥gica
    else {
      console.log("üì± Modo M√ìVIL detectado");
      // Ocultar botones de login/register siempre en m√≥vil
      if (loginBtn) {
        loginBtn.style.display = "none";
        console.log("üî≤ Login btn: OCULTO en m√≥vil");
      }
      if (registerBtn) {
        registerBtn.style.display = "none";
        console.log("üî≤ Register btn: OCULTO en m√≥vil");
      }

      if (isLoggedIn) {
        // Usuario logueado en m√≥vil: mostrar carrito/perfil, ocultar "Cuenta"
        console.log("üì±‚úÖ M√≥vil LOGUEADO: mostrando carrito/perfil");
        if (mobileAccountBtn) {
          mobileAccountBtn.style.display = "none";
          console.log("üî≤ Bot√≥n Cuenta: OCULTO");
        }
        if (userActions) {
          userActions.style.display = "flex";
          console.log("üî≤ User actions: VISIBLE");
        }
      } else {
        // Usuario NO logueado en m√≥vil: mostrar "Cuenta", ocultar carrito/perfil
        console.log("üì±‚ùå M√≥vil NO LOGUEADO: mostrando bot√≥n Cuenta");
        if (mobileAccountBtn) {
          mobileAccountBtn.style.display = "flex";
          console.log("üî≤ Bot√≥n Cuenta: VISIBLE");
        }
        if (userActions) {
          userActions.style.display = "none";
          console.log("üî≤ User actions: OCULTO");
        }
      }
    }

    // Inicializar timer de sesi√≥n si est√° logueado
    if (isLoggedIn) {
      resetSessionTimer();
    }
  }

  // ========== PROTECCI√ìN PARA BOTONES EN M√ìVIL ==========
  // Solo afectar m√≥vil, no PC/tablets
  function isMobile() {
    return window.innerWidth <= 768;
  }

  function requireLogin(callback) {
    const isLoggedIn = localStorage.getItem("isLoggedIn") === "true";

    if (isLoggedIn) {
      // Si est√° loggeado, ejecutar la acci√≥n normalmente
      callback();
    } else {
      // Si NO est√° loggeado, mostrar popup SOLO en m√≥vil
      if (isMobile()) {
        showAlert(
          "Debes iniciar sesi√≥n para acceder a esta funci√≥n",
          "warning"
        );
        setTimeout(() => {
          window.location.href = "sesion.html";
        }, 2000);
      } else {
        // En desktop, permitir acceso normal
        callback();
      }
    }
  }

  // NOTA: La protecci√≥n del carrito se elimin√≥ - ahora se maneja en cart-handler.js
  // El bot√≥n del carrito ahora redirige directamente a checkout.html

  // Proteger bot√≥n del perfil SOLO en m√≥vil
  if (profileBtn) {
    profileBtn.addEventListener("click", function (e) {
      if (isMobile()) {
        e.preventDefault();
        requireLogin(() => {
          // Ir al perfil normalmente
          window.location.href = "Userprofile.html";
        });
      }
      // En desktop, funciona normal sin restricci√≥n
    });
  }

  // DEBUGGING: Forzar actualizaci√≥n inicial despu√©s de 100ms
  setTimeout(() => {
    console.log("üîÑ Forzando actualizaci√≥n inicial...");
    updateNavigation();
  }, 100);

  // Actualizar al cargar la p√°gina
  updateNavigation();

  // Actualizar cuando cambie el tama√±o de pantalla
  window.addEventListener("resize", () => {
    console.log("üìè Resize detectado - actualizando navegaci√≥n");
    updateNavigation();
  });

  // Actualizar cuando cambie el localStorage
  window.addEventListener("storage", function (e) {
    if (e.key === "isLoggedIn") {
      console.log("üíæ Cambio en localStorage detectado");
      updateNavigation();
    }
  });

  // ========== FUNCI√ìN GLOBAL PARA CERRAR SESI√ìN ==========
  // Para que funcione desde cualquier p√°gina
  window.cerrarSesion = async function () {
    const confirmed = await confirmLogout();
    if (confirmed) {
      logout();
    }
  };

  // DEBUGGING: Funci√≥n global para testing manual
  window.testMobileButton = function () {
    console.log("üß™ TEST: Estado actual");
    console.log("Window width:", window.innerWidth);
    console.log("Is mobile:", window.innerWidth <= 768);
    console.log("Is logged in:", localStorage.getItem("isLoggedIn"));
    console.log("Mobile account btn display:", mobileAccountBtn?.style.display);
    console.log("User actions display:", userActions?.style.display);
  };
});
